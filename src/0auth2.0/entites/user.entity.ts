import { ApiProperty } from '@nestjs/swagger';

import { Column, Entity, OneToMany, PrimaryColumn } from 'typeorm';
import { Role } from '../enums';
import { Site } from 'src/sites/entities/site.entity';
import { Department } from 'src/departments/entities/department.entity';
import { Contractor } from 'src/contractors/entities/contractor.entity';
import { Role as RoleEntity } from 'src/roles/entities/Role.entity';
import { Employee } from 'src/employees/entities/employee.entity';
import { AssetRegister } from 'src/assetRegister/entities/assetRegister.entity';
@Entity()
export class User {
  @ApiProperty({
    description: 'custom user id generated by uuid module',
  })
  @PrimaryColumn()
  userId: string;

  @ApiProperty({
    description: 'username of the user',
  })
  @Column()
  userName: string;

  @ApiProperty({
    description: 'business name of user',
  })
  @Column()
  businessName: string;

  @ApiProperty({
    description: 'email of the user',
  })
  @Column()
  email: string;

  @ApiProperty({
    description: 'hashed password',
  })
  @Column()
  password: string;

  @ApiProperty({
    description: 'hashed refresh token',
  })
  @Column({
    nullable: true,
  })
  hashedRt: string;

  @ApiProperty({
    description: 'user verification status',
  })
  @Column({
    default: true,
  })
  isVerified: boolean;

  @ApiProperty({
    description: 'user verification status',
  })
  @Column()
  role: Role;

  @OneToMany(() => Site, (site) => site.siteCreatedBy, {
    onDelete: 'CASCADE',
    cascade: true,
  })
  userSites: Site[];

  @OneToMany(() => Department, (dept) => dept.deptCreatedBy, {
    onDelete: 'CASCADE',
    cascade: true,
  })
  userDepts: Department[];

  @OneToMany(() => Contractor, (contractor) => contractor.contractorCreatedBy, {
    onDelete: 'CASCADE',
    cascade: true,
  })
  userContractors: Contractor[];

  @OneToMany(() => RoleEntity, (role) => role.roleCreatedBy, {
    onDelete: 'CASCADE',
    cascade: true,
  })
  userRoles: Role[];

  @OneToMany(() => Employee, (employee) => employee.employeeCreatedBy, {
    onDelete: 'CASCADE',
    cascade: true,
  })
  userEmployees: Employee[];

  @OneToMany(
    () => AssetRegister,
    (assetRegister) => assetRegister.assetCreatedBy,
    {
      onDelete: 'CASCADE',
      cascade: true,
    },
  )
  userAssets: Employee[];
}
