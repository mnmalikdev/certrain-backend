"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.User = void 0;
const swagger_1 = require("@nestjs/swagger");
const typeorm_1 = require("typeorm");
const enums_1 = require("../enums");
const site_entity_1 = require("../../sites/entities/site.entity");
const department_entity_1 = require("../../departments/entities/department.entity");
const contractor_entity_1 = require("../../contractors/entities/contractor.entity");
const Role_entity_1 = require("../../roles/entities/Role.entity");
const employee_entity_1 = require("../../employees/entities/employee.entity");
const assetRegister_entity_1 = require("../../assetRegister/entities/assetRegister.entity");
const riskAssesment_entity_1 = require("../../RiskAssesment/entities/riskAssesment.entity");
let User = exports.User = class User {
};
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'custom user id generated by uuid module',
    }),
    (0, typeorm_1.PrimaryColumn)(),
    __metadata("design:type", String)
], User.prototype, "userId", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'username of the user',
    }),
    (0, typeorm_1.Column)(),
    __metadata("design:type", String)
], User.prototype, "userName", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'business name of user',
    }),
    (0, typeorm_1.Column)(),
    __metadata("design:type", String)
], User.prototype, "businessName", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'email of the user',
    }),
    (0, typeorm_1.Column)(),
    __metadata("design:type", String)
], User.prototype, "email", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'hashed password',
    }),
    (0, typeorm_1.Column)(),
    __metadata("design:type", String)
], User.prototype, "password", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'hashed refresh token',
    }),
    (0, typeorm_1.Column)({
        nullable: true,
    }),
    __metadata("design:type", String)
], User.prototype, "hashedRt", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'user verification status',
    }),
    (0, typeorm_1.Column)({
        default: true,
    }),
    __metadata("design:type", Boolean)
], User.prototype, "isVerified", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'user verification status',
    }),
    (0, typeorm_1.Column)(),
    __metadata("design:type", String)
], User.prototype, "role", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => site_entity_1.Site, (site) => site.siteCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userSites", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => department_entity_1.Department, (dept) => dept.deptCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userDepts", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => contractor_entity_1.Contractor, (contractor) => contractor.contractorCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userContractors", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => Role_entity_1.Role, (role) => role.roleCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userRoles", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => employee_entity_1.Employee, (employee) => employee.employeeCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userEmployees", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => assetRegister_entity_1.AssetRegister, (assetRegister) => assetRegister.assetCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userAssets", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => riskAssesment_entity_1.RiskAssessment, (ra) => ra.riskAssessmentCreatedBy, {
        onDelete: 'CASCADE',
        cascade: true,
    }),
    __metadata("design:type", Array)
], User.prototype, "userRiskAssessments", void 0);
exports.User = User = __decorate([
    (0, typeorm_1.Entity)()
], User);
//# sourceMappingURL=user.entity.js.map